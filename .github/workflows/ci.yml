name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Pin npm version
        run: |
          echo "📦 Installing npm@10.9.2 to match local development environment..."
          npm install -g npm@10.9.2
          echo "✅ npm version: $(npm --version)"

      - name: Install dependencies
        run: |
          echo "📦 Installing project dependencies..."
          npm ci || {
            echo "❌ Failed to install dependencies!"
            echo "→ Try running 'npm ci' locally to reproduce the issue"
            echo "→ Ensure package-lock.json is committed and up to date"
            echo "→ Check if you have access to all npm registries"
            exit 1
          }

      - name: Generate Prisma client
        run: |
          echo "🗄️ Generating Prisma client..."
          npm run prisma:generate || {
            echo "❌ Failed to generate Prisma client!"
            echo "→ Ensure prisma schema is valid"
            echo "→ Check prisma/schema.prisma for syntax errors"
            echo "→ Run 'npm run prisma:generate' locally to debug"
            exit 1
          }

      # Note: Code formatting check removed - pre-commit hooks ensure formatting
      # This eliminates redundancy while maintaining code quality

      - name: Lint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint || {
            echo "❌ Linting failed!"
            echo ""
            echo "To fix linting issues:"
            echo "1. Review the errors above"
            echo "2. Run 'npm run lint:fix' to auto-fix some issues"
            echo "3. Manually fix remaining issues"
            echo "4. Commit and push your changes"
            echo ""
            echo "📚 Common issues:"
            echo "→ Unused variables: prefix with '_' or remove"
            echo "→ Missing return types: add explicit TypeScript types"
            echo "→ Import order: let ESLint auto-fix handle this"
            exit 1
          }

      - name: Type check
        run: |
          echo "📝 Running TypeScript type check..."
          npm run typecheck || {
            echo "❌ TypeScript type check failed!"
            echo ""
            echo "To fix type errors:"
            echo "1. Review the errors above"
            echo "2. Add missing type annotations"
            echo "3. Fix type mismatches"
            echo "4. Avoid using 'any' type"
            echo ""
            echo "💡 Tips:"
            echo "→ Enable strict mode in tsconfig.json"
            echo "→ Use VS Code for real-time type checking"
            echo "→ Check DEVELOPMENT_PHILOSOPHY_APPENDIX_TYPESCRIPT.md"
            exit 1
          }

      - name: Strict TypeScript checking
        run: |
          echo "🔍 Running strict TypeScript checking..."
          npm run typecheck || {
            echo "❌ Strict TypeScript checking failed!"
            echo ""
            echo "To fix strict type violations:"
            echo "1. Address unused variables (prefix with '_' or remove)"
            echo "2. Add explicit return types where required"
            echo "3. Fix unsafe indexed access patterns"
            echo "4. Resolve implicit any types"
            echo ""
            echo "💡 This step enforces higher code quality standards"
            echo "→ See tsconfig.typecheck.json for strict rules"
            echo "→ Run 'npm run typecheck' locally to test"
            exit 1
          }

      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests with coverage..."
          npm run test:coverage || {
            echo "❌ Tests failed!"
            echo ""
            echo "To debug test failures:"
            echo "1. Run 'npm test' locally"
            echo "2. For specific test: 'npm test -- path/to/test'"
            echo "3. Update snapshots if needed: 'npm test -- -u'"
            echo "4. Check test coverage thresholds in jest.config.js"
            echo ""
            echo "📊 Coverage requirements:"
            echo "→ Global: 27% minimum (temporarily lowered from 85%)"
            echo "→ Core logic (api/, lib/): 17-36% minimum (temporarily lowered from 90%)"
            echo "→ See BACKLOG.md for coverage improvement plan"
            exit 1
          }

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      # Note: Edge Runtime compatibility check removed - pre-push hook covers this
      # This eliminates duplication while maintaining comprehensive validation

      - name: Build
        run: |
          echo "🔨 Building Next.js application..."
          npm run build || {
            echo "❌ Build failed!"
            echo ""
            echo "To fix build issues:"
            echo "1. Run 'npm run build' locally"
            echo "2. Check for TypeScript errors"
            echo "3. Verify all imports are correct"
            echo "4. Ensure environment variables are set"
            echo ""
            echo "💡 Common build issues:"
            echo "→ Missing environment variables"
            echo "→ Import errors in production-only code"
            echo "→ TypeScript errors not caught in dev mode"
            echo "→ Edge Runtime compatibility issues"
            echo "→ Invalid Tailwind CSS classes"
            exit 1
          }

      - name: Build Storybook
        run: |
          echo "📚 Building Storybook..."
          npm run build-storybook || {
            echo "❌ Storybook build failed!"
            echo ""
            echo "To fix Storybook build issues:"
            echo "1. Run 'npm run storybook' locally"
            echo "2. Check for story syntax errors"
            echo "3. Verify all component imports"
            echo "4. Review .storybook configuration"
            echo ""
            echo "📖 See STORYBOOK_GUIDELINES.md for help"
            exit 1
          }

  security_scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Pin npm version
        run: |
          echo "📦 Installing npm@10.9.2 to match local development environment..."
          npm install -g npm@10.9.2
          echo "✅ npm version: $(npm --version)"

      - name: Install dependencies
        run: |
          echo "📦 Installing project dependencies..."
          npm ci || {
            echo "❌ Failed to install dependencies!"
            echo "→ Try running 'npm ci' locally to reproduce the issue"
            echo "→ Ensure package-lock.json is committed and up to date"
            exit 1
          }

      - name: Build security audit filter script
        run: |
          echo "🔧 Building security audit filter script..."
          npm run build:audit-filter || {
            echo "❌ Failed to build audit filter script!"
            echo ""
            echo "To fix TypeScript compilation issues:"
            echo "1. Check TypeScript errors in scripts/audit-filter.ts"
            echo "2. Verify tsconfig.scripts.json is properly configured"
            echo "3. Ensure all dependencies in src/lib/audit-filter/ compile correctly"
            echo "4. Run 'npm run build:audit-filter' locally to reproduce"
            echo ""
            echo "💡 Common issues:"
            echo "→ Missing TypeScript dependencies"
            echo "→ Module resolution configuration problems"
            echo "→ Import path errors in audit filter core files"
            exit 1
          }

      - name: Verify audit filter compilation output
        run: |
          echo "✅ Verifying compiled audit filter exists..."
          if [ ! -f "dist/scripts/audit-filter.js" ]; then
            echo "❌ Compiled audit filter script not found!"
            echo ""
            echo "Expected file: dist/scripts/audit-filter.js"
            echo "Debugging information:"
            echo "→ Build directory contents:"
            ls -la dist/ 2>/dev/null || echo "  dist/ directory does not exist"
            if [ -d "dist/scripts" ]; then
              echo "→ Scripts directory contents:"
              ls -la dist/scripts/ || echo "  dist/scripts/ is empty or inaccessible"
            else
              echo "→ dist/scripts/ directory does not exist"
            fi
            echo ""
            echo "This indicates the TypeScript compilation completed without errors"
            echo "but failed to produce the expected output file."
            echo ""
            echo "To fix this issue:"
            echo "1. Check tsconfig.scripts.json outDir configuration"
            echo "2. Verify TypeScript compilation actually processes the target file"
            echo "3. Review build logs for silent failures"
            echo "4. Test locally: npm run build:audit-filter && ls -la dist/scripts/"
            exit 1
          fi
          echo "✅ Audit filter script compilation verified successfully"

      - name: Run security scan with allowlist filtering
        run: |
          echo "🔒 Checking for non-allowlisted high and critical security vulnerabilities..."

          # Log npm and node versions for debugging
          echo "📋 Environment information:"
          echo "→ npm version: $(npm --version)"
          echo "→ node version: $(node --version)"
          echo ""

          # Verify the compiled script is executable before running
          if [ ! -x "dist/scripts/audit-filter.js" ]; then
            echo "⚠️  Warning: Audit filter script is not executable, attempting to make it executable..."
            chmod +x dist/scripts/audit-filter.js || {
              echo "❌ Failed to make audit filter script executable!"
              echo "→ Check file permissions in CI environment"
              exit 1
            }
          fi

          # Run the security scan with enhanced error reporting
          node dist/scripts/audit-filter.js || {
            EXIT_CODE=$?
            echo "❌ Security scan failed with exit code: $EXIT_CODE"
            echo ""
            
            if [ $EXIT_CODE -eq 1 ]; then
              echo "🔍 Security vulnerabilities detected or scan failed!"
              echo ""
              echo "To fix security issues:"
              echo "1. Update dependencies to resolve vulnerabilities"
              echo "2. OR add entries to .audit-allowlist.json with proper justification"
              echo ""
              echo "💡 Allowlist entries must include:"
              echo "→ Package name and vulnerability ID"
              echo "→ Clear justification for why it's being allowlisted"
              echo "→ Expiration date for when it should be fixed"
              echo ""
              echo "📋 Debugging information:"
              echo "→ Check if npm audit itself is working: npm audit --version"
              echo "→ Test allowlist file syntax: cat .audit-allowlist.json"
              echo "→ Run security scan locally: npm run security:scan"
            else
              echo "❌ Unexpected error during security scan execution!"
              echo ""
              echo "Possible causes:"
              echo "→ Runtime error in audit filter script"
              echo "→ Missing Node.js dependencies"
              echo "→ File system permissions issue"
              echo "→ npm audit command failure"
              echo ""
              echo "To debug:"
              echo "1. Run 'node dist/scripts/audit-filter.js' locally"
              echo "2. Check Node.js version compatibility"
              echo "3. Verify all required dependencies are installed"
              echo "4. Test npm audit command: npm audit --json"
            fi
            echo ""
            echo "See docs/SECURITY_VULNERABILITY_MANAGEMENT.md for details"
            exit 1
          }
