name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Pin npm version
        run: |
          echo "📦 Installing npm@10.9.2 to match local development environment..."
          npm install -g npm@10.9.2
          echo "✅ npm version: $(npm --version)"

      - name: Install dependencies
        run: |
          echo "📦 Installing project dependencies..."
          npm ci || {
            echo "❌ Failed to install dependencies!"
            echo "→ Try running 'npm ci' locally to reproduce the issue"
            echo "→ Ensure package-lock.json is committed and up to date"
            echo "→ Check if you have access to all npm registries"
            exit 1
          }

      - name: Generate Prisma client
        run: |
          echo "🗄️ Generating Prisma client..."
          npm run prisma:generate || {
            echo "❌ Failed to generate Prisma client!"
            echo "→ Ensure prisma schema is valid"
            echo "→ Check prisma/schema.prisma for syntax errors"
            echo "→ Run 'npm run prisma:generate' locally to debug"
            exit 1
          }

      # Note: Code formatting check removed - pre-commit hooks ensure formatting
      # This eliminates redundancy while maintaining code quality

      - name: Lint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint || {
            echo "❌ Linting failed!"
            echo ""
            echo "To fix linting issues:"
            echo "1. Review the errors above"
            echo "2. Run 'npm run lint:fix' to auto-fix some issues"
            echo "3. Manually fix remaining issues"
            echo "4. Commit and push your changes"
            echo ""
            echo "📚 Common issues:"
            echo "→ Unused variables: prefix with '_' or remove"
            echo "→ Missing return types: add explicit TypeScript types"
            echo "→ Import order: let ESLint auto-fix handle this"
            exit 1
          }

      - name: Type check
        run: |
          echo "📝 Running TypeScript type check..."
          npm run typecheck || {
            echo "❌ TypeScript type check failed!"
            echo ""
            echo "To fix type errors:"
            echo "1. Review the errors above"
            echo "2. Add missing type annotations"
            echo "3. Fix type mismatches"
            echo "4. Avoid using 'any' type"
            echo ""
            echo "💡 Tips:"
            echo "→ Enable strict mode in tsconfig.json"
            echo "→ Use VS Code for real-time type checking"
            echo "→ Check DEVELOPMENT_PHILOSOPHY_APPENDIX_TYPESCRIPT.md"
            exit 1
          }

      - name: Strict TypeScript checking
        run: |
          echo "🔍 Running strict TypeScript checking..."
          npm run typecheck || {
            echo "❌ Strict TypeScript checking failed!"
            echo ""
            echo "To fix strict type violations:"
            echo "1. Address unused variables (prefix with '_' or remove)"
            echo "2. Add explicit return types where required"
            echo "3. Fix unsafe indexed access patterns"
            echo "4. Resolve implicit any types"
            echo ""
            echo "💡 This step enforces higher code quality standards"
            echo "→ See tsconfig.typecheck.json for strict rules"
            echo "→ Run 'npm run typecheck' locally to test"
            exit 1
          }

      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests with coverage..."
          npm run test:coverage || {
            echo "❌ Tests failed!"
            echo ""
            echo "To debug test failures:"
            echo "1. Run 'npm test' locally"
            echo "2. For specific test: 'npm test -- path/to/test'"
            echo "3. Update snapshots if needed: 'npm test -- -u'"
            echo "4. Check test coverage thresholds in jest.config.js"
            echo ""
            echo "📊 Coverage requirements:"
            echo "→ Global: 27% minimum (temporarily lowered from 85%)"
            echo "→ Core logic (api/, lib/): 17-36% minimum (temporarily lowered from 90%)"
            echo "→ See BACKLOG.md for coverage improvement plan"
            exit 1
          }

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      # Note: Edge Runtime compatibility check removed - pre-push hook covers this
      # This eliminates duplication while maintaining comprehensive validation

      - name: Build
        run: |
          echo "🔨 Building Next.js application..."
          npm run build || {
            echo "❌ Build failed!"
            echo ""
            echo "To fix build issues:"
            echo "1. Run 'npm run build' locally"
            echo "2. Check for TypeScript errors"
            echo "3. Verify all imports are correct"
            echo "4. Ensure environment variables are set"
            echo ""
            echo "💡 Common build issues:"
            echo "→ Missing environment variables"
            echo "→ Import errors in production-only code"
            echo "→ TypeScript errors not caught in dev mode"
            echo "→ Edge Runtime compatibility issues"
            echo "→ Invalid Tailwind CSS classes"
            exit 1
          }

  security_scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "📦 Installing project dependencies..."
          npm ci || {
            echo "❌ Failed to install dependencies!"
            echo "→ Try running 'npm ci' locally to reproduce the issue"
            echo "→ Ensure package-lock.json is committed and up to date"
            exit 1
          }

      - name: Run security scan
        run: |
          echo "🔒 Checking for critical security vulnerabilities..."
          npm run security:audit || {
            echo "❌ Critical security vulnerabilities detected!"
            echo ""
            echo "To fix:"
            echo "1. Run 'npm audit' locally to see details"
            echo "2. Update dependencies with 'npm audit fix'"
            echo "3. For breaking changes, manually update package.json"
            exit 1
          }
          echo "✅ No critical vulnerabilities found"
