src/test-utils/a11y-helpers.tsx:41:    console.log(results.violations);
src/test-utils/a11y-helpers.tsx:135:        console.log(
src/auth.ts:24:    console.log(`Auth attempt for user: ${username}`);
src/auth.ts:25:    console.log(`Expected admin username: ${adminUsername}`);
src/auth.ts:26:    console.log(
src/auth.ts:36:      console.log('Authentication failed: someone tried using the demo credentials');
src/auth.ts:46:      console.log('Authentication successful');
src/auth.ts:59:    console.log('Authentication failed: invalid credentials');
src/lib/query.ts:17:          log: console.log,
src/lib/query.ts:18:          warn: console.warn,
src/lib/query.ts:19:          error: console.error,
scripts/audit-filter-new.ts:34:      console.log(
scripts/audit-filter-new.ts:42:    console.error('Error loading allowlist:', (error as Error).message);
scripts/audit-filter-new.ts:66:        console.error('Error parsing npm audit output:', (parseError as Error).message);
scripts/audit-filter-new.ts:71:    console.error('Error running npm audit:', (error as Error).message);
scripts/audit-filter-new.ts:97:    console.log('‚úÖ Security scan passed!');
scripts/audit-filter-new.ts:101:      console.log(`\n${allowedVulnerabilities.length} allowlisted vulnerabilities found:`);
scripts/audit-filter-new.ts:103:        console.log(`  - ${vuln.package}@${vuln.id} (${vuln.severity}): ${vuln.title}`);
scripts/audit-filter-new.ts:104:        console.log(`    Reason: ${vuln.reason}`);
scripts/audit-filter-new.ts:106:          console.log(`    Expires: ${vuln.expiresOn}`);
scripts/audit-filter-new.ts:113:      console.log('\n‚ö†Ô∏è  Warning: The following allowlist entries will expire within 30 days:');
scripts/audit-filter-new.ts:115:        console.log(`  - ${entry.package}@${entry.id} expires on ${entry.expiresOn}`);
scripts/audit-filter-new.ts:119:    console.error('‚ùå Security scan failed!');
scripts/audit-filter-new.ts:123:      console.error(
scripts/audit-filter-new.ts:127:        console.error(`  - ${vuln.package}@${vuln.id} (${vuln.severity}): ${vuln.title}`);
scripts/audit-filter-new.ts:128:        console.error(`    URL: ${vuln.url}`);
scripts/audit-filter-new.ts:134:      console.error(`\n${expiredAllowlistEntries.length} allowlist entries have expired:`);
scripts/audit-filter-new.ts:136:        console.error(`  - ${entry.package}@${entry.id} (${entry.severity}): ${entry.title}`);
scripts/audit-filter-new.ts:137:        console.error(`    Reason was: ${entry.reason}`);
scripts/audit-filter-new.ts:138:        console.error(`    Expired on: ${entry.expiresOn}`);
scripts/audit-filter-new.ts:142:    console.error('\nTo fix this issue:');
scripts/audit-filter-new.ts:143:    console.error('1. Update dependencies to resolve vulnerabilities');
scripts/audit-filter-new.ts:144:    console.error('2. Or add entries to .audit-allowlist.json with proper justification');
scripts/audit-filter-new.ts:152:  console.log('üîí Running npm audit with allowlist filtering...');
scripts/audit-filter-new.ts:173:    console.error('Error analyzing audit results:', (error as Error).message);
scripts/audit-filter.ts:34:      console.log(
scripts/audit-filter.ts:42:    console.error('Error loading allowlist:', (error as Error).message);
scripts/audit-filter.ts:66:        console.error('Error parsing npm audit output:', (parseError as Error).message);
scripts/audit-filter.ts:71:    console.error('Error running npm audit:', (error as Error).message);
scripts/audit-filter.ts:97:    console.log('‚úÖ Security scan passed!');
scripts/audit-filter.ts:101:      console.log(`\n${allowedVulnerabilities.length} allowlisted vulnerabilities found:`);
scripts/audit-filter.ts:103:        console.log(`  - ${vuln.package}@${vuln.id} (${vuln.severity}): ${vuln.title}`);
scripts/audit-filter.ts:104:        console.log(`    Reason: ${vuln.reason}`);
scripts/audit-filter.ts:106:          console.log(`    Expires: ${vuln.expiresOn}`);
scripts/audit-filter.ts:113:      console.log('\n‚ö†Ô∏è  Warning: The following allowlist entries will expire within 30 days:');
scripts/audit-filter.ts:115:        console.log(`  - ${entry.package}@${entry.id} expires on ${entry.expiresOn}`);
scripts/audit-filter.ts:119:    console.error('‚ùå Security scan failed!');
scripts/audit-filter.ts:123:      console.error(
scripts/audit-filter.ts:127:        console.error(`  - ${vuln.package}@${vuln.id} (${vuln.severity}): ${vuln.title}`);
scripts/audit-filter.ts:128:        console.error(`    URL: ${vuln.url}`);
scripts/audit-filter.ts:134:      console.error(`\n${expiredAllowlistEntries.length} allowlist entries have expired:`);
scripts/audit-filter.ts:136:        console.error(`  - ${entry.package}@${entry.id} (${entry.severity}): ${entry.title}`);
scripts/audit-filter.ts:137:        console.error(`    Reason was: ${entry.reason}`);
scripts/audit-filter.ts:138:        console.error(`    Expired on: ${entry.expiresOn}`);
scripts/audit-filter.ts:142:    console.error('\nTo fix this issue:');
scripts/audit-filter.ts:143:    console.error('1. Update dependencies to resolve vulnerabilities');
scripts/audit-filter.ts:144:    console.error('2. Or add entries to .audit-allowlist.json with proper justification');
scripts/audit-filter.ts:152:  console.log('üîí Running npm audit with allowlist filtering...');
scripts/audit-filter.ts:173:    console.error('Error analyzing audit results:', (error as Error).message);
src/hooks/keyboard/useShortcuts.ts:49:        console.error(`Failed to register shortcut "${shortcut.id}":`, error);
src/lib/db/readings.ts:18:    console.log(`Fetching reading with slug: ${slug}`);
src/lib/db/readings.ts:32:    console.log(reading ? `Found reading: ${reading.title}` : `No reading found for slug: ${slug}`);
src/lib/db/readings.ts:35:    console.error(`Error fetching reading with slug ${slug}:`, error);
src/lib/db/readings.ts:47:    console.log('Getting readings from database...');
src/lib/db/readings.ts:67:    console.log(`Found ${Array.isArray(readings) ? readings.length : 0} readings`);
src/lib/db/readings.ts:70:      console.warn('No readings found in database');
src/lib/db/readings.ts:76:    console.error('Error fetching readings:', error);
src/lib/db/readings.ts:91:    console.log('Getting filtered readings from database...');
src/lib/db/readings.ts:181:    console.log(`Total matching readings: ${totalCount}`);
src/lib/db/readings.ts:199:    console.log(`Found ${Array.isArray(readings) ? readings.length : 0} readings for current page`);
src/lib/db/readings.ts:206:    console.log(`Returning data for page ${currentPage} (offset: ${offset}, limit: ${limit})`);
src/lib/db/readings.ts:216:    console.error('Error fetching filtered readings:', error);
src/lib/db/readings.ts:235:    console.log(`Creating new reading: ${data.title} by ${data.author}`);
src/lib/db/readings.ts:243:      console.error(`Reading with slug ${data.slug} already exists`);
src/lib/db/readings.ts:260:    console.log(`Successfully created reading with ID: ${reading.id}`);
src/lib/db/readings.ts:263:    console.error('Error creating reading:', error);
src/lib/db/readings.ts:280:    console.log(`Updating reading with slug: ${slug}`);
src/lib/db/readings.ts:288:      console.error(`Reading with slug ${slug} not found`);
src/lib/db/readings.ts:299:        console.error(`Cannot update: reading with slug ${data.slug} already exists`);
src/lib/db/readings.ts:319:    console.log(`Successfully updated reading: ${updatedReading.title}`);
src/lib/db/readings.ts:322:    console.error(`Error updating reading with slug ${slug}:`, error);
src/lib/db/readings.ts:335:    console.log(`Deleting reading with slug: ${slug}`);
src/lib/db/readings.ts:343:      console.error(`Reading with slug ${slug} not found`);
src/lib/db/readings.ts:352:    console.log(`Successfully deleted reading with slug: ${slug}`);
src/lib/db/readings.ts:355:    console.error(`Error deleting reading with slug ${slug}:`, error);
src/lib/db/quotes.ts:17:    console.log('Getting quotes from database...');
src/lib/db/quotes.ts:22:    console.log(`Found ${Array.isArray(quotes) ? quotes.length : 0} quotes`);
src/lib/db/quotes.ts:25:      console.warn('No quotes found in database');
src/lib/db/quotes.ts:31:    console.error('Error fetching quotes:', error);
src/lib/db/quotes.ts:46:    console.log('Getting filtered quotes from database...');
src/lib/db/quotes.ts:98:    console.log(`Total matching quotes: ${totalCount}`);
src/lib/db/quotes.ts:116:    console.log(`Found ${Array.isArray(quotes) ? quotes.length : 0} quotes for current page`);
src/lib/db/quotes.ts:130:    console.error('Error fetching filtered quotes:', error);
src/lib/db/quotes.ts:149:    console.log(`Fetching quote with ID: ${id}`);
src/lib/db/quotes.ts:163:    console.log(quote ? `Found quote with ID ${id}` : `No quote found with ID ${id}`);
src/lib/db/quotes.ts:166:    console.error(`Error fetching quote with ID ${id}:`, error);
src/lib/db/quotes.ts:179:    console.log(
src/lib/db/quotes.ts:191:    console.log(`Successfully created quote with ID: ${quote.id}`);
src/lib/db/quotes.ts:194:    console.error('Error creating quote:', error);
src/lib/db/quotes.ts:208:    console.log(`Updating quote with ID: ${id}`);
src/lib/db/quotes.ts:216:      console.error(`Quote with ID ${id} not found`);
src/lib/db/quotes.ts:229:    console.log(`Successfully updated quote with ID: ${updatedQuote.id}`);
src/lib/db/quotes.ts:232:    console.error(`Error updating quote with ID ${id}:`, error);
src/lib/db/quotes.ts:245:    console.log(`Deleting quote with ID: ${id}`);
src/lib/db/quotes.ts:253:      console.error(`Quote with ID ${id} not found`);
src/lib/db/quotes.ts:262:    console.log(`Successfully deleted quote with ID: ${id}`);
src/lib/db/quotes.ts:265:    console.error(`Error deleting quote with ID ${id}:`, error);
src/lib/__tests__/logger.test.ts:82:    expect(consoleMocks.log).toHaveBeenCalledTimes(2); // debug and http use console.log
src/lib/logger.ts:121:      // For tests simulating production, use console.log for easy capturing
src/lib/logger.ts:124:        console.log(output);
src/lib/logger.ts:129:        console.log(output);
src/lib/logger.ts:138:          console.error(logString, hasMetadata ? metadata : undefined);
src/lib/logger.ts:141:          console.warn(logString, hasMetadata ? metadata : undefined);
src/lib/logger.ts:144:          console.info(logString, hasMetadata ? metadata : undefined);
src/lib/logger.ts:149:          console.log(logString, hasMetadata ? metadata : undefined);
src/app/api/readings/route.ts:146:    console.log('API Route: Fetching readings from database...');
src/app/api/readings/route.ts:154:      console.log(`API Route: Fetching reading with slug: ${slug}`);
src/app/api/readings/route.ts:162:      console.log(`API Route: Successfully fetched reading: ${data.title}`);
src/app/api/readings/route.ts:190:      console.log('API Route: Using advanced query with filters:', queryParams);
src/app/api/readings/route.ts:195:      console.log(
src/app/api/readings/route.ts:202:      console.log('API Route: Fetching all readings (legacy mode)');
src/app/api/readings/route.ts:205:      console.log(`API Route: Successfully fetched ${readings.length} readings`);
src/app/api/readings/route.ts:210:    console.error('API Route: Error fetching readings:', error);
src/app/api/readings/route.ts:247:    console.log('API Route: Creating new reading');
src/app/api/readings/route.ts:263:      console.error('API Route: Error parsing JSON:', error);
src/app/api/readings/route.ts:286:    console.log(`API Route: Successfully created reading: ${reading.title}`);
src/app/api/readings/route.ts:289:    console.error('API Route: Error creating reading:', error);
src/app/api/readings/route.ts:324:    console.log('API Route: Updating reading');
src/app/api/readings/route.ts:348:      console.error('API Route: Error parsing JSON:', error);
src/app/api/readings/route.ts:368:    console.log(`API Route: Successfully updated reading: ${reading.title}`);
src/app/api/readings/route.ts:371:    console.error('API Route: Error updating reading:', error);
src/app/api/readings/route.ts:401:    console.log('API Route: Deleting reading');
src/app/api/readings/route.ts:426:    console.log(`API Route: Successfully deleted reading with slug: ${slug}`);
src/app/api/readings/route.ts:434:    console.error('API Route: Error deleting reading:', error);
src/app/api/auth/[...nextauth]/route.ts:51:          console.error('Failed to parse user cookie:', e);
src/app/api/auth/[...nextauth]/route.ts:69:    console.log('POST request to auth endpoint received');
src/app/api/auth/[...nextauth]/route.ts:76:    console.log(`Login attempt: username=${username}, callbackUrl=${callbackUrl}`);
src/app/api/auth/[...nextauth]/route.ts:79:    console.log(
src/app/api/auth/[...nextauth]/route.ts:87:      console.log('Credentials validated successfully, setting cookies...');
src/app/api/auth/[...nextauth]/route.ts:91:      console.log(`Redirecting to: ${redirectUrl.toString()}`);
src/app/api/auth/[...nextauth]/route.ts:114:        console.log('Setting user cookie...');
src/app/api/auth/[...nextauth]/route.ts:135:      console.log('Returning redirect response...');
src/app/api/auth/[...nextauth]/route.ts:139:    console.log('Authentication failed, redirecting to login page with error');
src/app/api/auth/[...nextauth]/route.ts:146:    console.error('Login error:', error);
src/app/api/auth/[...nextauth]/route.ts:149:    console.error(`Error details: ${errorMessage}`);
src/app/api/quotes/route.ts:72:    console.log('API Route: Fetching quotes from database...');
src/app/api/quotes/route.ts:86:      console.log(`API Route: Fetching quote with ID: ${quoteId}`);
src/app/api/quotes/route.ts:93:      console.log(`API Route: Successfully fetched quote with ID: ${quoteId}`);
src/app/api/quotes/route.ts:119:      console.log('API Route: Using advanced query with filters:', queryParams);
src/app/api/quotes/route.ts:124:      console.log(
src/app/api/quotes/route.ts:131:      console.log('API Route: Fetching all quotes (legacy mode)');
src/app/api/quotes/route.ts:134:      console.log(`API Route: Successfully fetched ${quotes.length} quotes`);
src/app/api/quotes/route.ts:138:    console.error('API Route: Error fetching quotes:', error);
src/app/api/quotes/route.ts:153:    console.log('API Route: Creating new quote');
src/app/api/quotes/route.ts:168:      console.error('API Route: Error parsing JSON:', error);
src/app/api/quotes/route.ts:188:    console.log(`API Route: Successfully created quote with ID: ${quote.id}`);
src/app/api/quotes/route.ts:191:    console.error('API Route: Error creating quote:', error);
src/app/api/quotes/route.ts:206:    console.log('API Route: Updating quote');
src/app/api/quotes/route.ts:236:      console.error('API Route: Error parsing JSON:', error);
src/app/api/quotes/route.ts:254:    console.log(`API Route: Successfully updated quote with ID: ${quote.id}`);
src/app/api/quotes/route.ts:257:    console.error('API Route: Error updating quote:', error);
src/app/api/quotes/route.ts:272:    console.log('API Route: Deleting quote');
src/app/api/quotes/route.ts:303:    console.log(`API Route: Successfully deleted quote with ID: ${quoteId}`);
src/app/api/quotes/route.ts:308:    console.error('API Route: Error deleting quote:', error);
src/lib/audit-filter/cli-utils.ts:246:    console.log('‚úÖ Security scan passed!');
src/lib/audit-filter/cli-utils.ts:250:      console.log(`\n${results.allowedVulnerabilities.length} allowlisted vulnerabilities found:`);
src/lib/audit-filter/cli-utils.ts:252:        console.log(`  - ${vuln.package}@${vuln.id} (${vuln.severity}): ${vuln.title}`);
src/lib/audit-filter/cli-utils.ts:253:        console.log(`    Reason: ${vuln.reason}`);
src/lib/audit-filter/cli-utils.ts:255:          console.log(`    Expires: ${vuln.expiresOn}`);
src/lib/audit-filter/cli-utils.ts:262:      console.log('\n‚ö†Ô∏è  Warning: The following allowlist entries will expire within 30 days:');
src/lib/audit-filter/cli-utils.ts:264:        console.log(`  - ${entry.package}@${entry.id} expires on ${entry.expiresOn}`);
src/lib/audit-filter/cli-utils.ts:268:    console.error('‚ùå Security scan failed!');
src/lib/audit-filter/cli-utils.ts:272:      console.error(
src/lib/audit-filter/cli-utils.ts:276:        console.error(`  - ${vuln.package}@${vuln.id} (${vuln.severity}): ${vuln.title}`);
src/lib/audit-filter/cli-utils.ts:277:        console.error(`    URL: ${vuln.url}`);
src/lib/audit-filter/cli-utils.ts:283:      console.error(`\n${results.expiredAllowlistEntries.length} allowlist entries have expired:`);
src/lib/audit-filter/cli-utils.ts:285:        console.error(`  - ${entry.package}@${entry.id} (${entry.severity}): ${entry.title}`);
src/lib/audit-filter/cli-utils.ts:286:        console.error(`    Reason was: ${entry.reason}`);
src/lib/audit-filter/cli-utils.ts:287:        console.error(`    Expired on: ${entry.expiresOn}`);
src/lib/audit-filter/cli-utils.ts:291:    console.error('\nTo fix this issue:');
src/lib/audit-filter/cli-utils.ts:292:    console.error('1. Update dependencies to resolve vulnerabilities');
src/lib/audit-filter/cli-utils.ts:293:    console.error('2. Or add entries to .audit-allowlist.json with proper justification');
src/app/components/DarkModeToggle.stories.ts:36:<DarkModeToggle onClick={() => console.log('Custom handler')} />
src/app/components/DarkModeToggle.stories.ts:156:      console.log('Toggle clicked');
src/app/readings/page.tsx:56:        console.error('Invalid API response format:', result);
src/app/readings/page.tsx:60:      console.log(
src/app/readings/page.tsx:69:      console.error('Error fetching readings:', err);
src/app/readings/page.tsx:92:        console.error('Error loading initial data:', error);
src/app/readings/page.tsx:132:      console.error('Error loading more readings:', error);
src/app/readings/page.tsx:180:          console.log('Loading element visible, triggering loadMore');
src/app/components/TypewriterQuotes.tsx:91:        console.log('TypewriterQuotes: Fetching quotes from API...');
src/app/components/TypewriterQuotes.tsx:104:        console.log('TypewriterQuotes: API response status:', response.status);
src/app/components/TypewriterQuotes.tsx:117:        console.log(`TypewriterQuotes: Received ${data.length} quotes from API`);
src/app/components/TypewriterQuotes.tsx:130:        console.error('TypewriterQuotes: Error fetching quotes:', error);
src/app/components/TypewriterQuotes.tsx:175:        console.error('Failed to clear interval:', e);
src/app/components/TypewriterQuotes.tsx:279:          console.error('Failed to clear timeout:', e);
src/app/components/quotes/QuotesList.tsx:98:    console.error('Error highlighting search term:', error);
src/lib/audit-filter/__tests__/cli-utils.test.ts:25:const originalConsoleLog = console.log;
src/lib/audit-filter/__tests__/cli-utils.test.ts:26:const originalConsoleError = console.error;
src/lib/audit-filter/__tests__/cli-utils.test.ts:141:    console.log = mockConsoleLog;
src/lib/audit-filter/__tests__/cli-utils.test.ts:142:    console.error = mockConsoleError;
src/lib/audit-filter/__tests__/cli-utils.test.ts:147:    console.log = originalConsoleLog;
src/lib/audit-filter/__tests__/cli-utils.test.ts:148:    console.error = originalConsoleError;
src/app/hooks/__tests__/useReadingsQuotesList.test.tsx:95:    const originalConsoleError = console.error;
src/app/hooks/__tests__/useReadingsQuotesList.test.tsx:96:    console.error = jest.fn();
src/app/hooks/__tests__/useReadingsQuotesList.test.tsx:113:    // Restore console.error
src/app/hooks/__tests__/useReadingsQuotesList.test.tsx:114:    console.error = originalConsoleError;
src/app/hooks/useListState.ts:266:      console.log(`Fetching data for page ${state.pagination.currentPage} with params:`, params);
src/app/hooks/useListState.ts:284:      console.error('Error fetching list data:', error);
src/app/admin/login/page.tsx:62:      console.error('Login error:', error);
src/lib/audit-filter/__tests__/cli-integration.test.ts:40:    console.error(`Error: ${(error as Error).message}`);
src/lib/audit-filter/__tests__/integration.test.ts:60:      console.log(
src/lib/audit-filter/__tests__/integration.test.ts:68:    console.error('Error loading allowlist:', (error as Error).message);
src/app/components/SearchBar.stories.ts:344:        onSearch: () => console.log('Primary search clicked'),
src/app/components/SearchBar.stories.ts:350:        onSearch: () => console.log('Secondary search clicked'),
src/app/components/SearchBar.stories.ts:356:        onSearch: () => console.log('Minimal search clicked'),
src/app/components/SearchBar.stories.ts:372:        onSearch: () => console.log('Primary search clicked'),
src/app/components/SearchBar.stories.ts:378:        onSearch: () => console.log('Secondary search clicked'),
src/app/components/SearchBar.stories.ts:384:        onSearch: () => console.log('Minimal search clicked'),
src/app/components/SearchBar.stories.ts:437:        onSearch: () => console.log('Accessible search clicked'),
src/app/components/SearchBar.stories.ts:495:          onSearch: () => console.log('Responsive search clicked'),
src/app/components/SearchBar.stories.ts:524:        onSearch: () => console.log('Interactive search clicked'),
src/app/components/SearchBar.stories.ts:551:        onSearch: () => console.log('Mobile search clicked'),
src/app/admin/layout.tsx:45:        console.error('Error checking auth status:', error);
src/app/admin/page.tsx:100:        console.error('Error fetching data:', error);
src/lib/audit-filter/__tests__/logging.test.ts:17:// Mock console.log and console.error
src/lib/audit-filter/__tests__/logging.test.ts:27:    // Mock console.log and console.error
src/lib/audit-filter/__tests__/logging.test.ts:51:      // Verify console.log was called with success message
src/lib/audit-filter/__tests__/logging.test.ts:53:      // Verify console.error was not called
src/lib/audit-filter/__tests__/logging.test.ts:77:      // Verify console.error was called with failure message
src/lib/audit-filter/__tests__/logging.test.ts:79:      // Verify console.log was not called
src/app/admin/readings/page.tsx:211:      console.error('Error saving reading:', err);
src/app/admin/readings/page.tsx:253:      console.error('Error deleting reading:', err);
src/app/components/readings/__tests__/ReadingsList.test.tsx:208:    // console.log(container.innerHTML);
src/app/admin/quotes/page.tsx:156:      console.error('Error saving quote:', err);
src/app/admin/quotes/page.tsx:198:      console.error('Error deleting quote:', err);
src/app/components/readings/ReadingsList.tsx:54:    console.error('Error formatting date:', error);
src/app/components/readings/ReadingsList.tsx:140:    console.error('Error highlighting search term:', error);
