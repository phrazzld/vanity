#!/usr/bin/env sh
# Pre-push hook: Runs before pushing to the remote repository
# This hook ensures code quality by:
# 1. Running the complete test suite
# 2. Enforcing branch naming conventions

echo "🚀 Running pre-push checks..."

# Get the current branch name
BRANCH_NAME=$(git symbolic-ref --short HEAD)
echo "🌿 Current branch: $BRANCH_NAME"

# ========================================
# Branch naming convention check
# ========================================

# Define allowed branch name patterns
MAIN_PATTERN="^(main|master)$"
FEATURE_PATTERN="^feature/[a-z0-9]+([-/][a-z0-9]+)*$"
FIX_PATTERN="^fix/[a-z0-9]+([-/][a-z0-9]+)*$"
DOCS_PATTERN="^docs/[a-z0-9]+([-/][a-z0-9]+)*$"
REFACTOR_PATTERN="^refactor/[a-z0-9]+([-/][a-z0-9]+)*$"
RELEASE_PATTERN="^release/v[0-9]+\.[0-9]+\.[0-9]+$"
DEV_PATTERN="^dev(elop)?$"
PLAN_PATTERN="^plan/[a-z0-9]+([-/][a-z0-9]+)*$"  # Support existing plan branches
ISSUE_PATTERN="^[0-9]+[-][a-z0-9]+([-][a-z0-9]+)*$"  # Support GitHub issue-based branches like "25-refactor-description"

# Check if branch name follows the conventions
case "$BRANCH_NAME" in
  main|master) echo "✅ Branch naming convention check passed" ;;
  feature/*) echo "✅ Branch naming convention check passed" ;;
  fix/*) echo "✅ Branch naming convention check passed" ;;
  docs/*) echo "✅ Branch naming convention check passed" ;;
  refactor/*) echo "✅ Branch naming convention check passed" ;;
  release/v*) echo "✅ Branch naming convention check passed" ;;
  dev|develop) echo "✅ Branch naming convention check passed" ;;
  plan/*) echo "✅ Branch naming convention check passed" ;;
  [0-9]*-*) echo "✅ Branch naming convention check passed (GitHub issue branch)" ;;
  *)
    echo "❌ ERROR: Branch naming convention check failed"
    echo "Branch names must follow one of these patterns:"
    echo "  • main, master (for main branches)"
    echo "  • feature/feature-name (for new features)"
    echo "  • fix/bug-description (for bug fixes)"
    echo "  • docs/what-was-documented (for documentation)"
    echo "  • refactor/what-was-refactored (for refactoring)"
    echo "  • release/vX.Y.Z (for release branches)"
    echo "  • dev, develop (for development branches)"
    echo "  • plan/plan-description (for planning branches)"
    echo "  • 123-description (for GitHub issue-based branches)"
    echo ""
    echo "Please rename your branch and try again."
    exit 1
    ;;
esac

# Note: Code formatting check removed - pre-commit hook ensures formatting
# This eliminates redundancy while maintaining code quality

# ========================================
# Check ESLint
# ========================================
echo "🔍 Running ESLint check..."
if npm run lint > lint_output.log 2>&1; then
  echo "✅ ESLint check passed"
  rm lint_output.log
else
  # Check if only warnings (no errors)
  if grep -q "0 errors" lint_output.log && grep -q "warning" lint_output.log; then
    echo "⚠️  ESLint check passed with warnings"
    cat lint_output.log | grep -E "(warning|problems)"
    rm lint_output.log
  else
    cat lint_output.log
    rm lint_output.log
    echo ""
    echo "❌ ESLint check failed!"
    echo ""
    echo "To fix linting issues:"
    echo "1. Review the errors above"
    echo "2. Run 'npm run lint:fix' to auto-fix some issues"
    echo "3. Manually fix remaining issues"
    echo "4. Commit and push your changes"
    echo ""
    echo "📚 Common issues:"
    echo "→ Unused variables: prefix with '_' or remove"
    echo "→ Missing return types: add explicit TypeScript types"
    echo "→ Import order: let ESLint auto-fix handle this"
    exit 1
  fi
fi

# ========================================
# Check TypeScript types
# ========================================
echo "📝 Running TypeScript type check..."
if npm run typecheck > typecheck_output.log 2>&1; then
  echo "✅ TypeScript type check passed"
  rm typecheck_output.log
else
  cat typecheck_output.log
  rm typecheck_output.log
  echo ""
  echo "❌ TypeScript type check failed!"
  echo ""
  echo "To fix type errors:"
  echo "1. Review the errors above"
  echo "2. Add missing type annotations"
  echo "3. Fix type mismatches"
  echo "4. Avoid using 'any' type"
  echo ""
  echo "💡 Tips:"
  echo "→ Enable strict mode in tsconfig.json"
  echo "→ Use VS Code for real-time type checking"
  echo "→ Check DEVELOPMENT_PHILOSOPHY_APPENDIX_TYPESCRIPT.md"
  exit 1
fi

# ========================================
# Build verification (Vercel and Storybook)
# ========================================

# Check if build verification should be skipped
if [ "$SKIP_BUILD_CHECK" = "true" ]; then
  echo "⚠️ Build verification bypassed by SKIP_BUILD_CHECK=true"
else
  echo "🔨 Verifying builds before push..."
  
  # Run main application build
  echo "📦 Building main application..."
  if npm run build > build_output.log 2>&1; then
    echo "✅ Main application build passed"
    rm build_output.log
  else
    echo ""
    echo "❌ Main application build failed!"
    echo ""
    echo "The build that would run on Vercel is failing locally."
    echo "Build errors:"
    echo ""
    cat build_output.log | tail -20
    rm build_output.log
    echo ""
    echo "To fix build errors:"
    echo "1. Run 'npm run build' locally to see full output"
    echo "2. Fix TypeScript errors and build issues"
    echo "3. Ensure all dependencies are properly imported"
    echo ""
    echo "To skip build verification (not recommended):"
    echo "  SKIP_BUILD_CHECK=true git push"
    exit 1
  fi
  
  # Run Storybook build
  echo "📚 Building Storybook..."
  if npm run build-storybook > storybook_output.log 2>&1; then
    echo "✅ Storybook build passed"
    rm storybook_output.log
  else
    echo ""
    echo "❌ Storybook build failed!"
    echo ""
    echo "The Storybook build that runs in CI is failing locally."
    echo "Build errors:"
    echo ""
    cat storybook_output.log | tail -20
    rm storybook_output.log
    echo ""
    echo "To fix Storybook build errors:"
    echo "1. Run 'npm run build-storybook' locally to see full output"
    echo "2. Fix TypeScript errors in stories and components"
    echo "3. Check .storybook configuration"
    echo ""
    echo "To skip build verification (not recommended):"
    echo "  SKIP_BUILD_CHECK=true git push"
    exit 1
  fi
  
  echo "🎉 All builds verified successfully!"
fi

# ========================================
# Security vulnerability scan
# ========================================
echo "🔒 Running security vulnerability scan..."
if .husky/pre-push-security; then
  echo "✅ Security scan passed"
else
  exit 1
fi

# ========================================
# Check Edge Runtime compatibility
# ========================================
echo "🌐 Checking Edge Runtime compatibility..."

# Create the edge compatibility check script
cat > check-edge-compat.js << 'EOF'
const fs = require('fs');
const path = require('path');

const edgeIncompatiblePkgs = ['winston', 'fs', 'path', 'crypto', 'os', 'child_process'];
const clientFiles = [];

function findFiles(dir, pattern) {
  const files = fs.readdirSync(dir);
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
      findFiles(filePath, pattern);
    } else if (pattern.test(file)) {
      clientFiles.push(filePath);
    }
  });
}

// Find all client components and pages
findFiles('./src', /\.(tsx?|jsx?)$/);

let hasIssues = false;

clientFiles.forEach(file => {
  const content = fs.readFileSync(file, 'utf-8');
  // Check for 'use client' directive
  if (content.includes("'use client'") || content.includes('"use client"')) {
    edgeIncompatiblePkgs.forEach(pkg => {
      const importPattern = new RegExp(`from\\s+['"\`](.*/)?${pkg}['"\`]|require\\s*\\(['"\`](.*/)?${pkg}['"\`]\\)`);
      if (importPattern.test(content)) {
        console.error(`❌ Edge Runtime incompatible: ${file} imports '${pkg}'`);
        hasIssues = true;
      }
    });
  }
});

if (hasIssues) {
  console.error('\n🚨 Edge Runtime compatibility issues found!');
  console.error('→ Client components cannot use Node.js APIs');
  console.error('→ Use runtime checks or Edge-compatible alternatives');
  process.exit(1);
} else {
  console.log('✅ All client components are Edge Runtime compatible');
}
EOF

# Run the edge compatibility check
if node check-edge-compat.js; then
  rm check-edge-compat.js
else
  rm check-edge-compat.js
  echo ""
  echo "To fix Edge Runtime issues:"
  echo "1. Remove Node.js-only imports from client components"
  echo "2. Use runtime checks for Node.js APIs"
  echo "3. Create Edge-compatible alternatives"
  echo ""
  echo "💡 Common solutions:"
  echo "→ Use dynamic imports with runtime checks"
  echo "→ Create separate Edge-compatible modules"
  echo "→ Move Node.js logic to API routes"
  exit 1
fi

# ========================================
# Run tests with coverage (comprehensive test validation)
# ========================================
echo "🧪 Running tests with coverage..."
if npm run test:coverage > coverage_output.log 2>&1; then
  echo "✅ Tests and coverage check passed"
  rm coverage_output.log
else
  # Extract coverage failures from output
  if grep -q "coverage threshold" coverage_output.log; then
    echo "❌ Test coverage below required thresholds!"
    echo ""
    echo "Coverage failures:"
    grep -E "coverage threshold|not met" coverage_output.log | sed 's/^/  /'
    echo ""
    echo "To fix coverage issues:"
    echo "1. Run 'npm run test:coverage' to see detailed report"
    echo "2. Add tests for untested code"
    echo "3. Check jest.config.js for coverage requirements"
    echo ""
    echo "💡 Current thresholds:"
    echo "→ Global: 27% minimum (temporarily lowered from 85%)"
    echo "→ Core logic (api/, lib/): 17-36% minimum (temporarily lowered from 90%)"
    echo "→ See BACKLOG.md for coverage improvement plan"
    rm coverage_output.log
    exit 1
  else
    # If it's another type of test failure (like logger tests), we need to check
    if grep -q "Test Suites:.*failed" coverage_output.log; then
      echo "❌ Tests failed!"
      echo ""
      # Show which tests failed
      grep -E "FAIL|●" coverage_output.log | head -20
      echo ""
      echo "To debug test failures:"
      echo "1. Run 'npm test' locally to see full output"
      echo "2. Fix failing tests before pushing"
      rm coverage_output.log
      exit 1
    else
      # Check if it's just obsolete snapshots
      if grep -q "Test Suites:.*passed.*total" coverage_output.log && grep -q "Tests:.*passed.*total" coverage_output.log; then
        echo "✅ Tests and coverage check passed (obsolete snapshots warning ignored)"
        rm coverage_output.log
      else
        # Unknown failure, show output
        cat coverage_output.log
        rm coverage_output.log
        exit 1
      fi
    fi
  fi
fi

echo "✅ All pre-push checks completed successfully!"