#!/usr/bin/env sh
# Security scan for pre-push

# Check if this is a security scan bypass
if [ "$SKIP_SECURITY_SCAN" = "true" ]; then
  echo "‚ö†Ô∏è Security scan bypassed by SKIP_SECURITY_SCAN=true"
  exit 0
fi

echo "üîí Running security vulnerability scan..."

# Build the security audit filter script if needed
if [ ! -f "dist/scripts/audit-filter.js" ]; then
  echo "üî® Building security audit filter script..."
  npm run build:audit-filter > /dev/null 2>&1 || {
    echo "‚ùå Failed to build audit filter script!"
    echo "‚Üí Try running 'npm run build:audit-filter' locally first"
    exit 1
  }
fi

# Run security scan
echo "üîç Checking for non-allowlisted high and critical security vulnerabilities..."
if ! node dist/scripts/audit-filter.js; then
  echo ""
  echo "‚ùå Security vulnerabilities detected!"
  echo ""
  echo "To fix security issues:"
  echo "1. Update dependencies to resolve vulnerabilities"
  echo "2. OR add entries to .audit-allowlist.json with proper justification"
  echo ""
  echo "üí° Allowlist entries must include:"
  echo "‚Üí Package name and vulnerability ID"
  echo "‚Üí Clear justification for why it's being allowlisted"
  echo "‚Üí Expiration date for when it should be fixed"
  echo ""
  echo "See docs/SECURITY_VULNERABILITY_MANAGEMENT.md for details"
  exit 1
fi

# Check for secrets using simple patterns
echo "üîë Checking for potential secrets in changes..."

# Define patterns for secrets (simplified version)
SECRET_PATTERNS=(
  "password[=\"':= ]+"
  "api[-_]?key[=\"':= ]+"
  "secret[=\"':= ]+"
  "token[=\"':= ]+"
  "credential[=\"':= ]+"
  "jwt[=\"':= ]+"
  "auth[=\"':= ]+"
)

# Get changed files
FILES_TO_CHECK=$(git diff --name-only $(git merge-base @{u} HEAD)..HEAD)

# Check the files
for FILE in $FILES_TO_CHECK; do
  # Skip binary files, non-existent files, this security script itself, and test files
  if [ ! -f "$FILE" ] || [ -z "$(file -b --mime-type "$FILE" | grep -E 'text/')" ] || [ "$FILE" = ".husky/pre-push-security" ]; then
    continue
  fi
  
  # Skip test files (they legitimately contain test secrets)
  case "$FILE" in
    */__tests__/* | *.test.* | *.spec.* | **/fixtures/* | **/mocks/*)
      continue
      ;;
  esac
  
  # Check for secret patterns
  for PATTERN in "${SECRET_PATTERNS[@]}"; do
    if grep -E "$PATTERN" "$FILE" > /dev/null; then
      echo "‚ö†Ô∏è Potential secret found in $FILE"
      echo "   Pattern: $PATTERN"
      echo "   Please verify this isn't an actual secret before pushing."
      
      # Ask for confirmation
      echo ""
      echo "Do you want to continue with the push? (y/n)"
      read -r CONTINUE
      if [ "$CONTINUE" != "y" ] && [ "$CONTINUE" != "Y" ]; then
        echo "Push aborted by user."
        exit 1
      fi
      
      break
    fi
  done
done

echo "‚úÖ Security checks passed!"
exit 0