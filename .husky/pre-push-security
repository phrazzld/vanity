#!/usr/bin/env bash
# Security scan for pre-push

# Check if this is a security scan bypass
if [ "$SKIP_SECURITY_SCAN" = "true" ]; then
  echo "‚ö†Ô∏è Security scan bypassed by SKIP_SECURITY_SCAN=true"
  exit 0
fi

echo "üîí Running security vulnerability scan..."

# Run npm audit for critical vulnerabilities only
echo "üîç Checking for critical security vulnerabilities..."
if npm audit --audit-level=critical > /dev/null 2>&1; then
  echo "‚úÖ No critical vulnerabilities found"
else
  echo ""
  echo "‚ùå Critical security vulnerabilities detected!"
  echo ""
  echo "Run 'npm audit' to see details"
  echo ""
  echo "To fix security issues:"
  echo "1. Update dependencies with 'npm audit fix'"
  echo "2. Manually update package.json for breaking changes"
  echo ""
  exit 1
fi

# Check for secrets using simple patterns
echo "üîë Checking for potential secrets in changes..."

# Define patterns for secrets (looking for actual hardcoded values, not form fields)
SECRET_PATTERNS=(
  "password[=\"'][^\"']*[a-zA-Z0-9]{3,}[^\"']*[\"']"
  "api[-_]?key[=\"'][^\"']*[a-zA-Z0-9]{10,}[^\"']*[\"']"
  "secret[=\"'][^\"']*[a-zA-Z0-9]{8,}[^\"']*[\"']"
  "token[=\"'][^\"']*[a-zA-Z0-9]{10,}[^\"']*[\"']"
  "credential[=\"'][^\"']*[a-zA-Z0-9]{8,}[^\"']*[\"']"
  "jwt[=\"'][^\"']*[a-zA-Z0-9]{20,}[^\"']*[\"']"
  "bearer [a-zA-Z0-9]{10,}"
)

# Get changed files (with fallback for branches without upstream)
UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo "origin/main")
BASE_REF=$(git merge-base "$UPSTREAM" HEAD 2>/dev/null || echo "HEAD~1")
FILES_TO_CHECK=$(git diff --name-only "$BASE_REF..HEAD")

# Check the files
for FILE in $FILES_TO_CHECK; do
  # Skip binary files, non-existent files, this security script itself, and test files
  if [ ! -f "$FILE" ] || [ -z "$(file -b --mime-type "$FILE" | grep -E 'text/')" ] || [ "$FILE" = ".husky/pre-push-security" ]; then
    continue
  fi
  
  # Skip test files, documentation, audit files, and GitHub workflows (they legitimately contain examples and token references)
  case "$FILE" in
    */__tests__/* | *.test.* | *.spec.* | **/fixtures/* | **/mocks/* | docs/*.md | *.md | *-audit.txt | *-usage-audit.txt | console-*.txt | detailed-usage.txt | .github/workflows/*.yml | .github/workflows/*.yaml)
      continue
      ;;
  esac
  
  # Check for secret patterns
  for PATTERN in "${SECRET_PATTERNS[@]}"; do
    if grep -E "$PATTERN" "$FILE" > /dev/null; then
      echo "‚ö†Ô∏è Potential secret found in $FILE"
      echo "   Pattern: $PATTERN"
      echo "   Please verify this isn't an actual secret before pushing."
      
      # Ask for confirmation
      echo ""
      echo "Do you want to continue with the push? (y/n)"
      read -r CONTINUE
      if [ "$CONTINUE" != "y" ] && [ "$CONTINUE" != "Y" ]; then
        echo "Push aborted by user."
        exit 1
      fi
      
      break
    fi
  done
done

echo "‚úÖ Security checks passed!"
exit 0